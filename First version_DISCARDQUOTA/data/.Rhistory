pop[age,as.character(y),as.character(ss),aa]
pop
names(migration_area[i]
)
pop
migration[aa,,as.character(ss)]
pop[age,as.character(y),as.character(ss),aa] * migration_area[i]
pop[age,as.character(y),as.character(ss),aa]
migration_area[i]
pop
population_dynamics <- function(pop, startyear, endyear, season, natmortality, catches, recruitment){
#pop[age,year, season, area]
for (y in (startyear:endyear)){     # need to think this, but maybe is better change last year (y in (endy:(endy +10)))
for (ss in (1:length(season))){
# move time ---------------------
if (ss ==1){
for(age in 2:(dim(pop)[1])){
pop[age,as.character(y),as.character(ss),] <- pop[age-1,as.character(y-1),as.character(length(season)),];
}
} else {
pop[,as.character(y),as.character(ss),] <- pop[,as.character(y),as.character(ss-1),];
}
birth/recruitment ---------------------
if (ss ==1){
pop[1,as.character(y),as.character(ss),] <- c(100,0);
}
# natural mortality  ---------------------
pop[,as.character(y),as.character(ss),] <- pop[,as.character(y),as.character(ss),]*(1-natmortality)
pop[pop < 1e-20 ] <- 1e-20
# maturation ---------------------
#nummatures <- pop[,as.character(y),as.character(ss),recruitarea] * c(0,0.1,0.3,0.5) # last is vector of maturity
#migration ---------------------
#migration <- matrix (c(0.4,0,0.6,1), nrow=length(areas), ncol=length(areas), dimnames= list("from"=areas, "to"= areas))
migration <- array(c(rep(c(0.4,0,0.6,1),3), rep(c(0.6,1,0.4,0),3) ), dim=c(length(areas),length(areas),length(season)), dimnames=list(from=areas, to=areas, season=as.character(season)))
pop2<- pop # need to copy the pop to explit the migration among areas
for (aa in areas){
migration_area <- migration[aa,,as.character(ss)]
browser()
if (!1 %in% migration_area){ # if there are 1s, there is no migration, the populations remains in the same area
for (i in (1:length(migration_area))){
for(age in 2:(dim(pop)[1])){ # only fish above 1 year migrate
if (names(migration_area[i])==aa){
pop[age,as.character(y),as.character(ss),aa] <- pop[age,as.character(y),as.character(ss),aa] * migration_area[i]
} else{
pop[age,as.character(y),as.character(ss),names(migration_area[i])] <- pop[age,as.character(y),as.character(ss),names(migration_area[i])] + (pop[age,as.character(y),as.character(ss),aa] * migration_area[i])
}
#
#              if (ss <= 3){ # First 3 season fish migrate in one direction
#                if (names(migration_area[i])==aa){
#                  pop[age,as.character(y),as.character(ss),aa] <- pop2[age,as.character(y),as.character(ss),aa] * migration_area[i]
#                } else{
#                  pop[age,as.character(y),as.character(ss),names(migration_area[i])] <- pop2[age,as.character(y),as.character(ss),names(migration_area[i])] + (pop2[age,as.character(y),as.character(ss),aa] * migration_area[i])
#                }
#              } else { # Last 3 season fish migrate in the opposite direction
#                if (names(migration_area[i])==aa){
#                  pop[age,as.character(y),as.character(ss),names(migration_area[i])] <- pop2[age,as.character(y),as.character(ss),names(migration_area[i])] + (pop2[age,as.character(y),as.character(ss),aa] * migration_area[i])
#                } else{
#                  pop[age,as.character(y),as.character(ss),aa] <- pop2[age,as.character(y),as.character(ss),aa] * migration_area[i]
#                }
#              }
}
}
}
}
# remove catches (dims of catches here is ages,season, area, just like in main )
pop[,as.character(y),as.character(ss),] <- pop2[,as.character(y),as.character(ss),] - catches[,,as.character(ss),]
pop[pop < 1e-20 ] <- 1e-20
}
}
return(pop)
}
natmortality  <- 0.0001
pop1                <- array(0, dim=c(length(ages),endy + 1,length(season),length(areas)), dimnames=list(cat=ages,   year=as.character(1:(endy+1)), season=as.character(season), option =areas))
catches.n.dsvm      <- array(0, dim=c(length(ages),endy + 1,length(season),length(areas)), dimnames=list(cat=ages,   year=as.character(1:(endy+1)), season=as.character(season), option =areas))
catches.wt.dsvm     <- array(0, dim=c(length(ages),endy + 1,length(season),length(areas)), dimnames=list(cat=ages,   year=as.character(1:(endy+1)), season=as.character(season), option =areas))
catches.wt.dsvm.tot <- array(0, dim=c(1           ,endy + 1,              1,            1), dimnames=list(cat="all", year=as.character(1:(endy+1)), season="all",                option ="all"))
#run population for 15 year
pop1 <- population_dynamics(pop=pop1, recruitarea="a", startyear=2, endyear=stab.model, season=season, natmortality=natmortality, catches=catches.n.dsvm[,1,,, drop=F], recruitment=100)
population_dynamics <- function(pop, startyear, endyear, season, natmortality, catches, recruitment){
#pop[age,year, season, area]
for (y in (startyear:endyear)){     # need to think this, but maybe is better change last year (y in (endy:(endy +10)))
for (ss in (1:length(season))){
# move time ---------------------
if (ss ==1){
for(age in 2:(dim(pop)[1])){
pop[age,as.character(y),as.character(ss),] <- pop[age-1,as.character(y-1),as.character(length(season)),];
}
} else {
pop[,as.character(y),as.character(ss),] <- pop[,as.character(y),as.character(ss-1),];
}
birth/recruitment ---------------------
if (ss ==1){
pop[1,as.character(y),as.character(ss),] <- recruitment;
}
# natural mortality  ---------------------
pop[,as.character(y),as.character(ss),] <- pop[,as.character(y),as.character(ss),]*(1-natmortality)
pop[pop < 1e-20 ] <- 1e-20
# maturation ---------------------
#nummatures <- pop[,as.character(y),as.character(ss),recruitarea] * c(0,0.1,0.3,0.5) # last is vector of maturity
#migration ---------------------
#migration <- matrix (c(0.4,0,0.6,1), nrow=length(areas), ncol=length(areas), dimnames= list("from"=areas, "to"= areas))
migration <- array(c(rep(c(0.4,0,0.6,1),3), rep(c(0.6,1,0.4,0),3) ), dim=c(length(areas),length(areas),length(season)), dimnames=list(from=areas, to=areas, season=as.character(season)))
pop2<- pop # need to copy the pop to explit the migration among areas
for (aa in areas){
migration_area <- migration[aa,,as.character(ss)]
if (!1 %in% migration_area){ # if there are 1s, there is no migration, the populations remains in the same area
for (i in (1:length(migration_area))){
for(age in 2:(dim(pop)[1])){ # only fish above 1 year migrate
if (names(migration_area[i])==aa){
pop[age,as.character(y),as.character(ss),aa] <- pop[age,as.character(y),as.character(ss),aa] * migration_area[i]
} else{
pop[age,as.character(y),as.character(ss),names(migration_area[i])] <- pop[age,as.character(y),as.character(ss),names(migration_area[i])] + (pop[age,as.character(y),as.character(ss),aa] * migration_area[i])
}
#
#              if (ss <= 3){ # First 3 season fish migrate in one direction
#                if (names(migration_area[i])==aa){
#                  pop[age,as.character(y),as.character(ss),aa] <- pop2[age,as.character(y),as.character(ss),aa] * migration_area[i]
#                } else{
#                  pop[age,as.character(y),as.character(ss),names(migration_area[i])] <- pop2[age,as.character(y),as.character(ss),names(migration_area[i])] + (pop2[age,as.character(y),as.character(ss),aa] * migration_area[i])
#                }
#              } else { # Last 3 season fish migrate in the opposite direction
#                if (names(migration_area[i])==aa){
#                  pop[age,as.character(y),as.character(ss),names(migration_area[i])] <- pop2[age,as.character(y),as.character(ss),names(migration_area[i])] + (pop2[age,as.character(y),as.character(ss),aa] * migration_area[i])
#                } else{
#                  pop[age,as.character(y),as.character(ss),aa] <- pop2[age,as.character(y),as.character(ss),aa] * migration_area[i]
#                }
#              }
}
}
}
}
# remove catches (dims of catches here is ages,season, area, just like in main )
pop[,as.character(y),as.character(ss),] <- pop2[,as.character(y),as.character(ss),] - catches[,,as.character(ss),]
pop[pop < 1e-20 ] <- 1e-20
}
}
return(pop)
}
natmortality  <- 0.0001
pop1                <- array(0, dim=c(length(ages),endy + 1,length(season),length(areas)), dimnames=list(cat=ages,   year=as.character(1:(endy+1)), season=as.character(season), option =areas))
catches.n.dsvm      <- array(0, dim=c(length(ages),endy + 1,length(season),length(areas)), dimnames=list(cat=ages,   year=as.character(1:(endy+1)), season=as.character(season), option =areas))
catches.wt.dsvm     <- array(0, dim=c(length(ages),endy + 1,length(season),length(areas)), dimnames=list(cat=ages,   year=as.character(1:(endy+1)), season=as.character(season), option =areas))
catches.wt.dsvm.tot <- array(0, dim=c(1           ,endy + 1,              1,            1), dimnames=list(cat="all", year=as.character(1:(endy+1)), season="all",                option ="all"))
#run population for 15 year
pop1 <- population_dynamics(pop=pop1, startyear=2, endyear=stab.model, season=season, natmortality=natmortality, catches=catches.n.dsvm[,1,,, drop=F], recruitment=c(100,0))
population_dynamics <- function(pop, startyear, endyear, season, natmortality, catches, recruitment){
#pop[age,year, season, area]
for (y in (startyear:endyear)){     # need to think this, but maybe is better change last year (y in (endy:(endy +10)))
for (ss in (1:length(season))){
# move time ---------------------
if (ss ==1){
for(age in 2:(dim(pop)[1])){
pop[age,as.character(y),as.character(ss),] <- pop[age-1,as.character(y-1),as.character(length(season)),];
}
} else {
pop[,as.character(y),as.character(ss),] <- pop[,as.character(y),as.character(ss-1),];
}
#birth/recruitment ---------------------
if (ss ==1){
pop[1,as.character(y),as.character(ss),] <- recruitment;
}
# natural mortality  ---------------------
pop[,as.character(y),as.character(ss),] <- pop[,as.character(y),as.character(ss),]*(1-natmortality)
pop[pop < 1e-20 ] <- 1e-20
# maturation ---------------------
#nummatures <- pop[,as.character(y),as.character(ss),recruitarea] * c(0,0.1,0.3,0.5) # last is vector of maturity
#migration ---------------------
#migration <- matrix (c(0.4,0,0.6,1), nrow=length(areas), ncol=length(areas), dimnames= list("from"=areas, "to"= areas))
migration <- array(c(rep(c(0.4,0,0.6,1),3), rep(c(0.6,1,0.4,0),3) ), dim=c(length(areas),length(areas),length(season)), dimnames=list(from=areas, to=areas, season=as.character(season)))
pop2<- pop # need to copy the pop to explit the migration among areas
for (aa in areas){
migration_area <- migration[aa,,as.character(ss)]
if (!1 %in% migration_area){ # if there are 1s, there is no migration, the populations remains in the same area
for (i in (1:length(migration_area))){
for(age in 2:(dim(pop)[1])){ # only fish above 1 year migrate
if (names(migration_area[i])==aa){
pop[age,as.character(y),as.character(ss),aa] <- pop[age,as.character(y),as.character(ss),aa] * migration_area[i]
} else{
pop[age,as.character(y),as.character(ss),names(migration_area[i])] <- pop[age,as.character(y),as.character(ss),names(migration_area[i])] + (pop[age,as.character(y),as.character(ss),aa] * migration_area[i])
}
#
#              if (ss <= 3){ # First 3 season fish migrate in one direction
#                if (names(migration_area[i])==aa){
#                  pop[age,as.character(y),as.character(ss),aa] <- pop2[age,as.character(y),as.character(ss),aa] * migration_area[i]
#                } else{
#                  pop[age,as.character(y),as.character(ss),names(migration_area[i])] <- pop2[age,as.character(y),as.character(ss),names(migration_area[i])] + (pop2[age,as.character(y),as.character(ss),aa] * migration_area[i])
#                }
#              } else { # Last 3 season fish migrate in the opposite direction
#                if (names(migration_area[i])==aa){
#                  pop[age,as.character(y),as.character(ss),names(migration_area[i])] <- pop2[age,as.character(y),as.character(ss),names(migration_area[i])] + (pop2[age,as.character(y),as.character(ss),aa] * migration_area[i])
#                } else{
#                  pop[age,as.character(y),as.character(ss),aa] <- pop2[age,as.character(y),as.character(ss),aa] * migration_area[i]
#                }
#              }
}
}
}
}
# remove catches (dims of catches here is ages,season, area, just like in main )
pop[,as.character(y),as.character(ss),] <- pop2[,as.character(y),as.character(ss),] - catches[,,as.character(ss),]
pop[pop < 1e-20 ] <- 1e-20
}
}
return(pop)
}
natmortality  <- 0.0001
pop1                <- array(0, dim=c(length(ages),endy + 1,length(season),length(areas)), dimnames=list(cat=ages,   year=as.character(1:(endy+1)), season=as.character(season), option =areas))
catches.n.dsvm      <- array(0, dim=c(length(ages),endy + 1,length(season),length(areas)), dimnames=list(cat=ages,   year=as.character(1:(endy+1)), season=as.character(season), option =areas))
catches.wt.dsvm     <- array(0, dim=c(length(ages),endy + 1,length(season),length(areas)), dimnames=list(cat=ages,   year=as.character(1:(endy+1)), season=as.character(season), option =areas))
catches.wt.dsvm.tot <- array(0, dim=c(1           ,endy + 1,              1,            1), dimnames=list(cat="all", year=as.character(1:(endy+1)), season="all",                option ="all"))
#run population for 15 year
pop1 <- population_dynamics(pop=pop1, startyear=2, endyear=stab.model, season=season, natmortality=natmortality, catches=catches.n.dsvm[,1,,, drop=F], recruitment=c(100,0))
round(pop1)
wts
hr <- apply(catches.n.dsvm,1:3,sum)/    (apply(catches.n.dsvm,1:3,sum) +    apply(pop1,1:3,sum) )
#what happens in our yield curve for this hr?
yield_curve(hr=hr[,64,], wts, natmortality, R=100, sequence = 1, verbose=T)
round(catches.n.dsvm[,64,,],2)
round(pop1[,64,,],2)
#next, what happens to theoretical pop for our harvest, what is harvest?
hr[,64,]
mean(hr[,64,])
yc <- yield_curve(hr=hr[,64,], wts, natmortality, R=100, verbose=F)
ylim <- c(0,900)
#to check
par(mfrow=c(1,2))
plot(catches.wt.dsvm.tot, type="l", ylim=ylim)
plot(x=yc$hr, y=yc$yield, ylim=ylim)
points(mean(hr[,64,]),yc$yield[yc$hr>mean(hr[,64,])][1], col="red", pch=19)
points(mean(hr[,62,]),catches.wt.dsvm.tot[,62,,], col="blue", pch=19)
points(mean(hr[,63,]),catches.wt.dsvm.tot[,63,,], col="blue", pch=19)
points(mean(hr[,64,]),catches.wt.dsvm.tot[,64,,], col="blue", pch=19)
points(mean(hr[,65,]),catches.wt.dsvm.tot[,65,,], col="blue", pch=19)
points(mean(hr[,66,]),catches.wt.dsvm.tot[,66,,], col="blue", pch=19)
##############################################################################
# POPULATION DYNAMICS
##############################################################################
population_dynamics <- function(pop, startyear, endyear, season, natmortality, catches, recruitment, migration){
#pop[age,year, season, area]
MigToArea <- array(0, dim=dim(migration), dimnames= dimnames(migration))
for (y in (startyear:endyear)){     # need to think this, but maybe is better change last year (y in (endy:(endy +10)))
for (ss in (1:length(season))){
# move time ---------------------
if (ss ==1){
for(age in 2:(dim(pop)[1])){
pop[age,as.character(y),as.character(ss),] <- pop[age-1,as.character(y-1),as.character(length(season)),];
}
} else {
pop[,as.character(y),as.character(ss),] <- pop[,as.character(y),as.character(ss-1),];
}
# birth/recruitment ---------------------
if (ss ==1){
pop[1,as.character(y),as.character(ss),] <- recruitment;
}
# natural mortality  ---------------------
pop[,as.character(y),as.character(ss),] <- pop[,as.character(y),as.character(ss),]*(1-natmortality)
pop[pop < 1e-20 ] <- 1e-20
# remove catches (dims of catches here is ages,season, area, just like in main )
pop[,as.character(y),as.character(ss),] <- pop[,as.character(y),as.character(ss),] - catches[,,as.character(ss),]
pop[pop < 1e-20 ] <- 1e-20
#migration
for (age in (1:dim(pop)[1])){
MigToArea[age,1,as.character(ss),,] <- 0
for (toarea in (dimnames(pop)[4][[1]])){
for (fromarea in (dimnames(pop)[4][[1]])){
MigToArea[age,1,as.character(ss),toarea, fromarea] <-  MigToArea[age,1,as.character(ss),toarea,fromarea] + ( pop[age,as.character(y),as.character(ss),fromarea] * migration[age,1,as.character(ss),fromarea, toarea])
}
}
for (toarea in (dimnames(pop)[4][[1]])){
for (fromarea in (dimnames(pop)[4][[1]])){
pop[age,as.character(y),as.character(ss),toarea]  <-  pop[age,as.character(y),as.character(ss),toarea] +  MigToArea[age,1,as.character(ss),toarea, fromarea]
}
}
}
}
}
return(pop)
}
##############################################################################
# YIELD CURVE
##############################################################################
yield_curve <- function(hr,lratio, wts, natmortality, R=1, sequence = seq(0.001,2,0.001), verbose=F ){
# note that definition of hr is not completely correct (should be sum over seasons, and mean over ages), but as long as consistently incorect in code it should not matter
res <- data.frame("hr"=mean(hr) *sequence,"catch"=NA, "landings"=NA)
iii <- 1
sumR <- sum(R)
if (verbose == T){
print("total Recruitment")
print(R)
}
for (ii in sequence){
respop <- yld <-  matrix(0,nrow=length(ages), ncol=length(season), dimnames=list("cat"=ages,"season"=season))
respop[1,1] <- sumR
for(aa in ages){
if (aa==1){
# respop[aa,1] <- respop[aa,1] * (1-natmortality*1)
respop[aa,1] <- respop[aa,1] * (1-(hr[aa,1]*ii))
yld[aa,1]    <- sumR   - respop[aa,1]
respop[aa,1] <- respop[aa,1] * (1-natmortality*1)
}
if (aa > 1){
respop[aa,1] <- respop[aa-1,max(season)] * (1-natmortality*0)
respop[aa,1] <- respop[aa,1]             * (1-(hr[aa,1] *ii))
yld[aa,1]    <- respop[aa-1,max(season)] - respop[aa,1]
respop[aa,1] <- respop[aa,1]             * (1-natmortality*1)
}
for (ss in 2:(max(season))){
respop[aa,ss] <- respop[aa,ss-1] * (1-natmortality*0)
respop[aa,ss] <- respop[aa,ss]   * (1-(hr[aa,ss]*ii))
yld[aa,ss]    <- respop[aa,ss-1] - respop[aa,ss]
respop[aa,ss] <- respop[aa,ss]   * (1-natmortality*1)
}
}
res[iii, ]$catch    <- sum(yld*wts)
res[iii, ]$landings <- sum(yld*lratio*wts)
iii <- iii + 1
if (verbose == T){
print("yields (in numbers)")
print(yld)
print(" ")
print("population (in numbers)")
print(respop)
}
}
return(res)
}
ages <- 4
season <- 6
hr <- matrix(0.5,nrow=length(ages), ncol=length(season), dimnames=list("cat"=ages,"season"=season))
ages <- 1:ç4
ages <- 1:4
season <- 1:6
hr <- matrix(0.5,nrow=length(ages), ncol=length(season), dimnames=list("cat"=ages,"season"=season))
hr
lratio <- matrix(0.5,nrow=length(ages), ncol=length(season), dimnames=list("cat"=ages,"season"=season))
wts <- 1:4
natmortality <- 0.00001
yield_curve(hr,lratio,wts,natmortality)
history()
yc <- yield_curve(hr,lratio,wts,natmortality)
plot(catch~hr, data=yc)
lines(landings~hr, data=yc)
plot(catch~hr, data=yc,type="l", lty=2)
yc <- yield_curve(hr,lratio,wts,natmortality)
lines(landings~hr, data=yc)
lratio <- matrix(0.5,nrow=length(ages), ncol=length(season), dimnames=list("cat"=ages,"season"=season))
lratio[1:2,] <- 0
lratio
ages <- 1:4
season <- 1:6
hr <- matrix(0.5,nrow=length(ages), ncol=length(season), dimnames=list("cat"=ages,"season"=season))
hr
lratio <- matrix(0.5,nrow=length(ages), ncol=length(season), dimnames=list("cat"=ages,"season"=season))
lratio[1:2,] <- 0
lratio
wts <- 1:4
natmortality <- 0.00001
yc <- yield_curve(hr,lratio,wts,natmortality)
plot(catch~hr, data=yc,type="l", lty=2)
lines(landings~hr, data=yc)
yc
abline(v=yc[yc$catch==max(yc$catch),]$hr)
abline(v=yc[yc$catch==max(yc$catch),]$hr,lty=2)
plot(catch~hr, data=yc,type="l", lty=2)
yc
lines(landings~hr, data=yc)
abline(v=yc[yc$catch==max(yc$catch),]$hr,lty=2)
abline(v=yc[yc$landings==max(yc$landings),]$hr)
library(nekaneR)
library(plyr)
library(reshape2)
library(FLCore)
library(ggplotFL)
library (FLFishery)
library(RColorBrewer)
library(RDynState5NAI)
setwd("~/Dropbox/BoB/DynState/2017/results")
#==============================================================================
# data
#==============================================================================
res <- list()
load("scenario1.RData")
res[[1]]<- z
rm(z)
load("scenario2.RData")
res[[2]]<- z
rm(z)
load("scenario3.RData")
res[[3]]<- z
rm(z)
load("scenario4.RData")
res[[4]]<- z
rm(z)
load("5spp_dynstate_Inew.RData")
load("~/Dropbox/BoB/DynState/Imares_july/data/model_conditioning.RData")
catch_mean           <- lapply(catchmean, yearMeans)
# replace NA with 0, just for plotting
#-------------------------------------
catch_mean           <- lapply(catch_mean, function (x) replace (x,is.nan(x) | is.infinite(x),0))
catch_mean_df        <- as.data.frame(catch_mean)
catch_mean_df$q      <- with(catch_mean_df, paste(area, unit, sep=" "))
catch_mean_df        <- subset(catch_mean_df, select=c("len","season","data","qname","q"))
names(catch_mean_df) <- c("cat", "season","data","spp","area")
levels(catch_mean_df$spp) <- c(levels(catch_mean_df$spp),' horse\n mackerel')
catch_mean_df$spp[catch_mean_df$spp=="horse_mackerel"] <- c(' horse\n mackerel')
# remove areas VI PTB and VII PTB
#----------------------------------
catch_mean_df <-subset(catch_mean_df, !(area %in% c("VI PTB","VII PTB")))
# replace discards the others for just discards withpout MCRS
#-------------------------------------------------------------
a     <- subset(catch_mean_df, spp %in% "others" & cat %in% c('< MCRS'))
a$cat <- 'discards'
b     <- subset(catch_mean_df, spp %in% "others" & cat %in% c('> MCRS'))
b$cat <- 'landings'
catch_mean_df <-subset(catch_mean_df, !(spp %in% "others" & cat %in% c('< MCRS','> MCRS')))
catch_mean_df <- rbind(catch_mean_df, a, b)
rm(a, b, catch_mean)
# Order factor as I wish for the plotUnder a discard ban, different flexibilities could be applied to the system: international swaps, inter-species quota swap and de-minimis exceptions.
#------------------------------------
catch_mean_df$cat  <- factor(catch_mean_df$cat, levels=c('> MCRS','< MCRS', 'landings','discards'))
catch_mean_df$area <- factor(catch_mean_df$area,levels=c("VI OTB","VII OTB","VIIIabd OTB","VIIIabd PTB"))
catch_mean_df$spp  <- factor(catch_mean_df$spp, levels=c("hake","megrim","mackerel",' horse\n mackerel',"others"))
options(scipen=8)
ggplot() +
geom_line (data= catch_mean_df , aes(x =factor(season), y =pmax(data,0.01),group=cat, shape=cat,
linetype=cat),size=0.25)+
geom_point(data= catch_mean_df , aes(x =factor(season),y =pmax(data,0.01), group=cat, shape=cat,
linetype=cat), size=1)+
facet_grid(area~spp)+
scale_shape_manual(name= "CPUE", labels = c("> MCRS","< MCRS","landings","discards"),
values = c(19, 17, 1, 2), guide='legend')+
scale_linetype_manual(name= "CPUE", labels = c("> MCRS","< MCRS","landings","discards"),
values=c('solid','dashed','solid','dashed'), guide='legend')+
scale_y_log10(breaks=c(0.01,0.1,1,10,100))+
theme_bw()+
theme(panel.background = element_blank(),legend.title=element_blank(),
legend.position="bottom",axis.text=element_text(size=8),
strip.text = element_text(size = 8), text = element_text(size=7))+
xlab("season") +
ylab("CPUE (t/vessel)")
setwd("~/Dropbox/BoB/DynState/Git/Nekane__BoB/data")
library(RDynState5NAInodiscquota)
detach("package:FLCore", unload=TRUE)
detach("package:FLFishery", unload=TRUE)
detach("package:ggplotFL", unload=TRUE)
library(RDynState5NAInodiscquota)
load("5spp_dynstate_Inew.RData")
dim <- c(4,4); dimnames <- list(option=c("VIOTB","VIIOTB", "VIIIabdOTB", "VIIIabdPTB"),season=as.character(1:4))
effort  <- array(c(59,38,64,62,65,47,54,61,26,28,22,40,39,28,58,62), dim=dim, dimnames=dimnames)
macPrice    <- array(c(0,  709, 0, 1898, 0,  700, 0,  669),dim=dim,dimnames=dimnames)
hkePrice    <- array(c(0, 2525, 0, 2847, 0, 1879, 0, 2347),dim=dim,dimnames=dimnames)
lezPrice    <- array(c(0, 5312, 0, 4564, 0, 4898, 0, 5055),dim=dim,dimnames=dimnames)
homPrice    <- array(c(0,  742, 0, 1014, 0, 1274, 0, 1669),dim=dim,dimnames=dimnames)
othersPrice <- array(c(  0, 3001,   0, 2279,   0, 2807,   0, 3297),dim=dim,dimnames=dimnames)
control <- DynState.control(spp1LndQuota= 45,  spp2LndQuota= 538, #tn
spp1LndQuotaFine= 1E9, spp2LndQuotaFine=1E9, # tn
fuelUse =1 ,
fuelPrice = 1240, # euros/day
landingCosts= 121, # euros/tn
gearMaintenance= 271,
addNoFishing=TRUE, increments=40,
spp1DiscardSteps=2, spp2DiscardSteps=2,
interpolationdistance=12, simNumber=200, numThreads=16)
detach("package:RDynState5NAI", unload=TRUE)
library(RDynState5NAInodiscquota)
load("5spp_dynstate_Inew.RData")
dim <- c(4,4); dimnames <- list(option=c("VIOTB","VIIOTB", "VIIIabdOTB", "VIIIabdPTB"),season=as.character(1:4))
effort  <- array(c(59,38,64,62,65,47,54,61,26,28,22,40,39,28,58,62), dim=dim, dimnames=dimnames)
macPrice    <- array(c(0,  709, 0, 1898, 0,  700, 0,  669),dim=dim,dimnames=dimnames)
hkePrice    <- array(c(0, 2525, 0, 2847, 0, 1879, 0, 2347),dim=dim,dimnames=dimnames)
lezPrice    <- array(c(0, 5312, 0, 4564, 0, 4898, 0, 5055),dim=dim,dimnames=dimnames)
homPrice    <- array(c(0,  742, 0, 1014, 0, 1274, 0, 1669),dim=dim,dimnames=dimnames)
othersPrice <- array(c(  0, 3001,   0, 2279,   0, 2807,   0, 3297),dim=dim,dimnames=dimnames)
# apply(mean_price_other, c(2), mean, na.rm = TRUE)
# 1        2        3        4
# 3001.157 2278.688 2806.889 3297.455
# hom<- mean_price_main_spp[mean_price_main_spp$spp=="HOM",]
# hom<- array(c(hom$value), dim=c(4,10), dimnames=list(season=as.character(1:4),year=as.character(2003:2012)))
# apply(hom, c(1), mean, na.rm = TRUE)
#-------------------------------------------------------------------------------
# subsection{Scenario 1: Hake and Mackarel will be the most probably choke species, they need to swap quota
# Although this scenario allows to discards, therefore there should not be any Unconstrained quotum for discarding
#-------------------------------------------------------------------------------
#LndQuotaMAC= 73 / 11 vessels = 7
#DisQuotaMAC= sum(catchMean(mac))- 7 = 289.6552
#LndQuotaHKE= 5919/ 11 = 538
#DISQuotaHKE= sum(catchMean(hke))- 538 = 370.955
control <- DynState.control(spp1LndQuota= 45,  spp2LndQuota= 538, #tn
spp1LndQuotaFine= 1E9, spp2LndQuotaFine=1E9, # tn
fuelUse =1 ,
fuelPrice = 1240, # euros/day
landingCosts= 121, # euros/tn
gearMaintenance= 271,
addNoFishing=TRUE, increments=40,
spp1DiscardSteps=2, spp2DiscardSteps=2,
interpolationdistance=12, simNumber=200, numThreads=16)
detach("package:RDynState5NAI", unload=TRUE)
detach("package:RDynState5NAInodiscquota", unload=TRUE)
library(RDynState5NAInodiscquota)
load("5spp_dynstate_Inew.RData")
dim <- c(4,4); dimnames <- list(option=c("VIOTB","VIIOTB", "VIIIabdOTB", "VIIIabdPTB"),season=as.character(1:4))
effort  <- array(c(59,38,64,62,65,47,54,61,26,28,22,40,39,28,58,62), dim=dim, dimnames=dimnames)
macPrice    <- array(c(0,  709, 0, 1898, 0,  700, 0,  669),dim=dim,dimnames=dimnames)
hkePrice    <- array(c(0, 2525, 0, 2847, 0, 1879, 0, 2347),dim=dim,dimnames=dimnames)
lezPrice    <- array(c(0, 5312, 0, 4564, 0, 4898, 0, 5055),dim=dim,dimnames=dimnames)
homPrice    <- array(c(0,  742, 0, 1014, 0, 1274, 0, 1669),dim=dim,dimnames=dimnames)
othersPrice <- array(c(  0, 3001,   0, 2279,   0, 2807,   0, 3297),dim=dim,dimnames=dimnames)
-----------------------------------------------------------------------
library(RDynState5NAInodiscquota)
load("5spp_dynstate_Inew.RData")
library(RDynState5NAInodiscquota)
load("5spp_dynstate_Inew.RData")
