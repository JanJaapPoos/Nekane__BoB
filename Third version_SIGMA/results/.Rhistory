library(nekaneR)
library(plyr)
library(reshape2)
library(devtools)
library(FLCore)
library(ggplotFL)
library (FLFishery)
#==============================================================================
# Read data
#==============================================================================
y<-2003:2012
# Catch at age for the Basque fleet (FLFishery=flf), Stock data for the selected stocks (FLBiol=stk_bio),
# years, order of the species (mac, hom, hke, lez, anf),  fishmort and
# international catches for the last assessment (lez and mon in 2005, others in 2012)
load("~/Dropbox/BoB/DynState/July_2016/data/others_finAL.RData")
load("~/Dropbox/BoB/DynState/July_2016/data/FLFishery_Basque_BoB.RData")
species<- names(flf)
# Ang[[5]] and lez[[4]] in area VI equal to zero
landings.wt(flf[[4]][,,,,"VI"])[] <- 0
discards.wt(flf[[4]][,,,,"VI"])[] <- 0
landings.wt(flf[[5]][,,,,"VI"])[] <- 0
discards.wt(flf[[5]][,,,,"VI"])[] <- 0
#number_vessels[,,"PTB"] <- number_vessels[,,"PTB"] *2
#effort_days[,,"PTB"]    <- effort_days[,,"PTB"] *2
#-------------------------------------------------------------------------------
# Manipulating data for using it in the model
#-------------------------------------------------------------------------------
dimnames<-list(len=c('<MCRS','>MCRS'), year=c(2003:2012),unit=c("OTB","PTB"),
season=as.character(1:4),area=c("VI","VII","VIIIabd"))
#------------------------------------------------------------------------------
# CPUE (catch by vessel), catch weight (landings+ discards) by gear, season, year, day, vessel
#------------------------------------------------------------------------------
CPUE<-FLQuants(mac=FLQuant(, dimnames=dimnames),
hom=FLQuant(, dimnames=dimnames),
hke=FLQuant(, dimnames=dimnames),
lez=FLQuant(, dimnames=dimnames),
anf=FLQuant(, dimnames=dimnames),
others=FLQuant(, dimnames=dimnames))
for (i in 1:(length(species)+1)){
if (i<6){
catch.wt <- (landings.wt(flf[[i]])+ discards.wt(flf[[i]]))/1000
catch.wt[catch.wt==0]<- NA
units(catch.wt)<-"t"
CPUE1  <- catch.wt  %/% number_vessels[,as.character(y)]
#(effort_days[,as.character(y)] * number_vessels[,as.character(y)])#
}
if (i==6){
# Others is already in tonnes and in the proper format. <MCRS is the discard fraction,
# while >MCRS is the landing fraction for the group of species selected
CPUE1  <- others %/% number_vessels[,as.character(y)]
}
CPUE1[is.nan(CPUE1)| is.infinite(CPUE1)|CPUE1==0] <- NA
units(CPUE1)<-"t/vessel"
CPUE [[i]] <-CPUE1
}
CPUE <-   lapply(CPUE,function (x) {
units(x) <- "t/vessel"
return (x)
})
CPUE <- CPUE [-5]
# Remove the element 5 from the FLQuants --> ANGLERFISH
# Now it is considered under 'OTHERS' species
species<- names(CPUE)
#==============================================================================
## Structure for Jan Jaap's model
#==============================================================================
# Estimate the mean and the standard deviation of the time series by vessel
catchmean <-   lapply(CPUE,yearMeans)
catchmean <-   lapply(catchmean,function (x) {
quant(x) <- "cat"
units(x) <- "t/vessel"
return (x)
})
#variance divided by the number of years to estimate the variance of the mean
sigma    <-lapply(CPUE,function (x) sqrt(yearVars(x)/10))
sigma <-   lapply(sigma,function (x) {
quant(x) <- "cat"
units(x) <- "t/vessel"
return (x)
})
#==============================================================================
# DYNAMIC MODEL
#==============================================================================
library(RDynState5NAsigmaseason6Size)
#load("~/Documents/BoB/DynState/data/5spp_dynstate.RData")
mac <- hke <-  hom <- lez <- others <- new("DynStateInput")
sp<-c(mac=mac,hom=hom,hke=hke,lez=lez,others=others)
# OTB gear and PTB in area VIIIabd... for each time step a vessel chooses the gear (OTB, PTB)
# and the fishing ground based on the optimal choice given the vessel's state
#-------------------------------------------------------------------------------
dimnames<-list(len=c('<MCRS','>MCRS'),year="unique",unit="unique",
season=as.character(1:4),area=c("VIOTB","VIIOTB","VIIIabdOTB","VIIIabdPTB"))
catchmean2 <-FLQuants(mac=FLQuant(, dimnames=dimnames),
hom=FLQuant(, dimnames=dimnames),
hke=FLQuant(, dimnames=dimnames),
lez=FLQuant(, dimnames=dimnames),
others=FLQuant(, dimnames=dimnames))
sigma2 <-catchmean2
for(i in 1:5){
catchmean2 [[i]][,,,,c("VIOTB","VIIOTB","VIIIabdOTB")] <-catchmean[[i]][,,"OTB",]
catchmean2 [[i]][,,,,"VIIIabdPTB"] <-catchmean[[i]][,,"PTB",,'VIIIabd']
catchMean(sp[[i]])  <- catchmean2[[i]]
catchMean(sp[[i]])[is.na(catchMean(sp[[i]]))]<-0
catchMean(sp[[i]])[catchMean(sp[[i]])=="Inf"]<-0
catchMean(sp[[i]])[catchMean(sp[[i]])=="NaN"]<-0
catchMean(sp[[i]])<- catchMean(sp[[i]])[drop=T]
names(dimnames(catchMean(sp[[i]])))<- c('cat','season', 'option')
sigma2 [[i]][,,,,c("VIOTB","VIIOTB","VIIIabdOTB")] <-sigma[[i]][,,"OTB",]
sigma2 [[i]][,,,,"VIIIabdPTB"] <-sigma[[i]][,,"PTB",,'VIIIabd']
catchSigma(sp[[i]]) <- sigma2[[i]]
catchSigma(sp[[i]])[is.na(catchSigma(sp[[i]]))]<-0
catchSigma(sp[[i]])[catchSigma(sp[[i]])=="Inf"]<-0
catchSigma(sp[[i]])[catchSigma(sp[[i]])=="NaN"]<-0
catchSigma(sp[[i]])<- catchSigma(sp[[i]])[drop=T]
names(dimnames(catchSigma(sp[[i]])))<-c("cat","season","option")
}
mac    <- sp[[1]]
hom    <- sp[[2]]
hke    <- sp[[3]]
lez    <- sp[[4]]
others <- sp[[5]]
hke
###############################################################################
# BoB, data exploration
# Fleet dynamics
# AZTI,
# 11th July 2016
###############################################################################
#==============================================================================
# libraries
#==============================================================================
library(nekaneR)
library(plyr)
library(reshape2)
library(devtools)
library(FLCore)
library(ggplotFL)
library (FLFishery)
#==============================================================================
# Read data
#==============================================================================
y<-2003:2012
# Catch at age for the Basque fleet (FLFishery=flf), Stock data for the selected stocks (FLBiol=stk_bio),
# years, order of the species (mac, hom, hke, lez, anf),  fishmort and
# international catches for the last assessment (lez and mon in 2005, others in 2012)
load("~/Dropbox/BoB/DynState/July_2016/data/others_finAL.RData")
load("~/Dropbox/BoB/DynState/July_2016/data/FLFishery_Basque_BoB.RData")
species<- names(flf)
# Ang[[5]] and lez[[4]] in area VI equal to zero
landings.wt(flf[[4]][,,,,"VI"])[] <- 0
discards.wt(flf[[4]][,,,,"VI"])[] <- 0
landings.wt(flf[[5]][,,,,"VI"])[] <- 0
discards.wt(flf[[5]][,,,,"VI"])[] <- 0
#number_vessels[,,"PTB"] <- number_vessels[,,"PTB"] *2
#effort_days[,,"PTB"]    <- effort_days[,,"PTB"] *2
#-------------------------------------------------------------------------------
# Manipulating data for using it in the model
#-------------------------------------------------------------------------------
dimnames<-list(len=c('<MCRS','>MCRS'), year=c(2003:2012),unit=c("OTB","PTB"),
season=as.character(1:4),area=c("VI","VII","VIIIabd"))
#------------------------------------------------------------------------------
# CPUE (catch by vessel), catch weight (landings+ discards) by gear, season, year, day, vessel
#------------------------------------------------------------------------------
CPUE<-FLQuants(mac=FLQuant(, dimnames=dimnames),
hom=FLQuant(, dimnames=dimnames),
hke=FLQuant(, dimnames=dimnames),
lez=FLQuant(, dimnames=dimnames),
anf=FLQuant(, dimnames=dimnames),
others=FLQuant(, dimnames=dimnames))
for (i in 1:(length(species)+1)){
if (i<6){
catch.wt <- (landings.wt(flf[[i]])+ discards.wt(flf[[i]]))/1000
catch.wt[catch.wt==0]<- NA
units(catch.wt)<-"t"
CPUE1  <- catch.wt  %/% number_vessels[,as.character(y)]
#(effort_days[,as.character(y)] * number_vessels[,as.character(y)])#
}
if (i==6){
# Others is already in tonnes and in the proper format. <MCRS is the discard fraction,
# while >MCRS is the landing fraction for the group of species selected
CPUE1  <- others %/% number_vessels[,as.character(y)]
}
CPUE1[is.nan(CPUE1)| is.infinite(CPUE1)|CPUE1==0] <- NA
units(CPUE1)<-"t/vessel"
CPUE [[i]] <-CPUE1
}
CPUE <-   lapply(CPUE,function (x) {
units(x) <- "t/vessel"
return (x)
})
CPUE <- CPUE [-5]
# Remove the element 5 from the FLQuants --> ANGLERFISH
# Now it is considered under 'OTHERS' species
species<- names(CPUE)
#==============================================================================
## Structure for Jan Jaap's model
#==============================================================================
# Estimate the mean and the standard deviation of the time series by vessel
catchmean <-   lapply(CPUE,yearMeans)
catchmean <-   lapply(catchmean,function (x) {
quant(x) <- "cat"
units(x) <- "t/vessel"
return (x)
})
#variance divided by the number of years to estimate the variance of the mean
sigma    <-lapply(CPUE,function (x) sqrt(yearVars(x)/10))
sigma <-   lapply(sigma,function (x) {
quant(x) <- "cat"
units(x) <- "t/vessel"
return (x)
})
#==============================================================================
# DYNAMIC MODEL
#==============================================================================
library(RDynState5NAsigmaseason6Size)
#load("~/Documents/BoB/DynState/data/5spp_dynstate.RData")
mac <- hke <-  hom <- lez <- others <- new("DynStateInput")
sp<-c(mac=mac,hom=hom,hke=hke,lez=lez,others=others)
# OTB gear and PTB in area VIIIabd... for each time step a vessel chooses the gear (OTB, PTB)
# and the fishing ground based on the optimal choice given the vessel's state
#-------------------------------------------------------------------------------
dimnames<-list(len=c('<MCRS','>MCRS'),year="unique",unit="unique",
season=as.character(1:4),area=c("VIOTB","VIIOTB","VIIIabdOTB","VIIIabdPTB"))
catchmean2 <-FLQuants(mac=FLQuant(, dimnames=dimnames),
hom=FLQuant(, dimnames=dimnames),
hke=FLQuant(, dimnames=dimnames),
lez=FLQuant(, dimnames=dimnames),
others=FLQuant(, dimnames=dimnames))
sigma2 <-catchmean2
for(i in 1:5){
catchmean2 [[i]][,,,,c("VIOTB","VIIOTB","VIIIabdOTB")] <-catchmean[[i]][,,"OTB",]
catchmean2 [[i]][,,,,"VIIIabdPTB"] <-catchmean[[i]][,,"PTB",,'VIIIabd']
catchMean(sp[[i]])  <- catchmean2[[i]]
catchMean(sp[[i]])[is.na(catchMean(sp[[i]]))]<-0
catchMean(sp[[i]])[catchMean(sp[[i]])=="Inf"]<-0
catchMean(sp[[i]])[catchMean(sp[[i]])=="NaN"]<-0
catchMean(sp[[i]])<- catchMean(sp[[i]])[drop=T]
names(dimnames(catchMean(sp[[i]])))<- c('cat','season', 'option')
sigma2 [[i]][,,,,c("VIOTB","VIIOTB","VIIIabdOTB")] <-sigma[[i]][,,"OTB",]
sigma2 [[i]][,,,,"VIIIabdPTB"] <-sigma[[i]][,,"PTB",,'VIIIabd']
catchSigma(sp[[i]]) <- sigma2[[i]]
catchSigma(sp[[i]])[is.na(catchSigma(sp[[i]]))]<-0
catchSigma(sp[[i]])[catchSigma(sp[[i]])=="Inf"]<-0
catchSigma(sp[[i]])[catchSigma(sp[[i]])=="NaN"]<-0
catchSigma(sp[[i]])<- catchSigma(sp[[i]])[drop=T]
names(dimnames(catchSigma(sp[[i]])))<-c("cat","season","option")
}
mac    <- sp[[1]]
hom    <- sp[[2]]
hke    <- sp[[3]]
lez    <- sp[[4]]
others <- sp[[5]]
save(CPUE, species, flf, number_vessels,
effort_trips, effort_days, mac, hke, hom, lez, others,
file="~/Dropbox/BoB/DynState/Git/Nekane__BoB/Third version_SIGMA/data/5spp_dynstate_Inew.RData")
setwd("~/Dropbox/BoB/DynState/Git/Nekane__BoB/Third version_SIGMA/results")
load("~/Dropbox/BoB/DynState/Git/Nekane__BoB/Third version_SIGMA/data/5spp_dynstate_Inew.RData")
library(RDynState5NAsigmaseason6Size)
#-------------------------------------------------------------------------------
## Effort needed for each season in areas VI(OTB), VII(OTB), VIIIabd (OTB) and VIIIabd (PTB)
#-------------------------------------------------------------------------------
#effort_days_needed<- effort_days[,as.character(2003:2012)]%/%number_vessels[,as.character(2003:2012)]
#effort_days_needed<- apply(effort_days_needed, c(1,3:6), mean, na.rm = TRUE)
#units(effort_days_needed)<- "days/ vessel"
#effort <- array(c(54,38,64,112,62,47,54,114,28,28,22,82,39,28,58,120), dim=dim, dimnames=dimnames)
dim <- c(4,4)
dimnames <- list(option=c("VIOTB","VIIOTB", "VIIIabdOTB", "VIIIabdPTB"),season=as.character(1:4))
effort  <- array(c(59,38,65,62,
65,47,54,61,
26,28,22,40,
39,28,58,62), dim=dim, dimnames=dimnames)
dim <- c(2,4)
dimnames <- list(cat=1:2,season=as.character(1:4))
# Prices need to be in euros/ tn !!!!
macPrice    <- array(c(200,  709, 200, 1898, 200,  700, 200,  669),dim=dim,dimnames=dimnames)
hkePrice    <- array(c(200, 2525, 200, 2847, 200, 1879, 200, 2347),dim=dim,dimnames=dimnames)
lezPrice    <- array(c(200, 5312, 200, 4564, 200, 4898, 200, 5055),dim=dim,dimnames=dimnames)
homPrice    <- array(c(200,  742, 200, 1014, 200, 1274, 200, 1669),dim=dim,dimnames=dimnames)
othersPrice <- array(c(  0, 3001,   0, 2279,   0, 2807,   0, 3297),dim=dim,dimnames=dimnames)
#LndQuotaMAC= 5 / 15 vessels = 0.33
#LndQuotaHKE= 5583/ 15 = 372.2
#sizeinc with 148 increments is 1.70, lets put quota mac to 2
control <- DynState.control(spp1LndQuota= 2,  spp2LndQuota= 372, #tn
spp1LndQuotaFine= 1E9, spp2LndQuotaFine=1E9, # tn
fuelUse =1 ,
fuelPrice = 1240, # euros/day
landingCosts= 121, # euros/tn
gearMaintenance= 271,
addNoFishing=TRUE, increments=148,
spp1DiscardSteps=0, spp2DiscardSteps=0,
sigma= 110000, simNumber=1500, numThreads=16)
z <- DynState(mac, hke, lez, hom, others, macPrice, hkePrice, lezPrice, homPrice, othersPrice, effort, control)
library(plyr)
library(FLCore)
library(ggplotFL)
library(reshape2)
library(RColorBrewer)
library(RDynState5NAsigmaseason6Size)
setwd("~/Dropbox/BoB/DynState/Git/Nekane__BoB/Third version_SIGMA/results")
#==============================================================================
# data
#==============================================================================
res <- list()
load("scenario1.RData")
res[[1]]<- z
rm(z)
load("scenario2.RData")
res[[2]]<- z
rm(z)
load("scenario3.RData")
res[[3]]<- z
rm(z)
load("scenario4.RData")
res[[4]]<- z
rm(z)
load("modelvalidation.RData")
res[[5]]<- z
rm(z)
numsimu <- 1500
load("~/Dropbox/BoB/DynState/Git/Nekane__BoB/Third version_SIGMA/data/5spp_dynstate_Inew.RData")
load("~/Dropbox/BoB/DynState/Git/Nekane__BoB/Third version_SIGMA/data/5spp_dynstate_modelvalidation.RData")
load("~/Dropbox/BoB/DynState/Git/Nekane__BoB/Third version_SIGMA/data/model_conditioning.RData")
#==============================================================================
# Spatial and temporal patterns in cath rate
#==============================================================================
# map
# Dropbox/BoB/DynState/code/map.R
#==============================================================================
#  Figure 1: Spatial and temporal patterns in cath rates
#  Condition the model with the 2003-2012 average catch rates
#==============================================================================
catch_mean           <- lapply(catchmean, yearMeans)
# replace NA with 0, just for plotting
#-------------------------------------
catch_mean           <- lapply(catch_mean, function (x) replace (x,is.nan(x) | is.infinite(x),0))
catch_mean_df        <- as.data.frame(catch_mean)
catch_mean_df$q      <- with(catch_mean_df, paste(area, unit, sep=" "))
catch_mean_df        <- subset(catch_mean_df, select=c("len","season","data","qname","q"))
names(catch_mean_df) <- c("cat", "season","data","spp","area")
levels(catch_mean_df$spp) <- c(levels(catch_mean_df$spp),' horse\n mackerel')
catch_mean_df$spp[catch_mean_df$spp=="horse_mackerel"] <- c(' horse\n mackerel')
# remove areas VI PTB and VII PTB
#----------------------------------
catch_mean_df <-subset(catch_mean_df, !(area %in% c("VI PTB","VII PTB")))
# replace discards the others for just discards withpout MCRS
#-------------------------------------------------------------
a     <- subset(catch_mean_df, spp %in% "others" & cat %in% c('< MCRS'))
a$cat <- 'discards'
b     <- subset(catch_mean_df, spp %in% "others" & cat %in% c('> MCRS'))
b$cat <- 'landings'
catch_mean_df <-subset(catch_mean_df, !(spp %in% "others" & cat %in% c('< MCRS','> MCRS')))
catch_mean_df <- rbind(catch_mean_df, a, b)
rm(a, b, catch_mean)
# Order factor as I wish for the plotUnder a discard ban, different flexibilities could be applied to the system: international swaps, inter-species quota swap and de-minimis exceptions.
#------------------------------------
catch_mean_df$cat  <- factor(catch_mean_df$cat, levels=c('> MCRS','< MCRS', 'landings','discards'))
catch_mean_df$area <- factor(catch_mean_df$area,levels=c("VI OTB","VII OTB","VIIIabd OTB","VIIIabd PTB"))
catch_mean_df$spp  <- factor(catch_mean_df$spp, levels=c("hake","megrim","mackerel",' horse\n mackerel',"others"))
# Catch data from 2012, in order to check the results from the different scenarios
#----------------------------------------------------------------------------------
catch_2012           <- lapply(catchmean, '[',j=10)
# replace NA with 0, just for plotting
#-------------------------------------
catch_2012           <- lapply(catch_2012, function (x) replace (x,is.nan(x) | is.infinite(x),0))
catch_2012_df        <- as.data.frame(catch_2012)
catch_2012_df$q      <- with(catch_2012_df, paste(area, unit, sep=" "))
catch_2012_df        <- subset(catch_2012_df, select=c("len","season","data","qname","q"))
names(catch_2012_df) <- c("cat", "season","data","spp","area")
levels(catch_2012_df$spp) <- c(levels(catch_2012_df$spp),' horse\n mackerel')
catch_2012_df$spp[catch_2012_df$spp=="horse_mackerel"] <- c(' horse\n mackerel')
# remove areas VI PTB and VII PTB
#----------------------------------
catch_2012_df <-subset(catch_2012_df, !(area %in% c("VI PTB","VII PTB")))
# replace discards the others for just discards withpout MCRS
#-------------------------------------------------------------
a     <- subset(catch_2012_df, spp %in% "others" & cat %in% c('< MCRS'))
a$cat <- 'discards'
b     <- subset(catch_2012_df, spp %in% "others" & cat %in% c('> MCRS'))
b$cat <- 'landings'
catch_2012_df <-subset(catch_2012_df, !(spp %in% "others" & cat %in% c('< MCRS','> MCRS')))
catch_2012_df <- rbind(catch_2012_df, a, b)
rm(a, b, catch_2012)
# Order factor as I wish for the plotUnder a discard ban, different flexibilities could be applied to the system: international swaps, inter-species quota swap and de-minimis exceptions.
#------------------------------------
catch_2012_df$cat  <- factor(catch_2012_df$cat, levels=c('> MCRS','< MCRS', 'landings','discards'))
catch_2012_df$area <- factor(catch_2012_df$area,levels=c("VI OTB","VII OTB","VIIIabd OTB","VIIIabd PTB"))
catch_2012_df$spp  <- factor(catch_2012_df$spp, levels=c("hake","megrim","mackerel",' horse\n mackerel',"others"))
detach("package:FLFishery", unload=TRUE)
detach("package:ggplotFL", unload=TRUE)
# Effort (2012 fishing days) data from the study period
#------------------------------------
ref_effort           <- as.data.frame(effort_days[,as.character(2012)])
ref_effort           <- with(ref_effort,data.frame(unit,season,area,data))
ref_effort           <- subset(ref_effort, !(is.na(data)))
ref_effort$scenario  <- "2012" #"average"
ref_effort$choice    <- with(ref_effort, paste0(area,unit))
names(ref_effort)    <- c("gear","season","area","effort","scenario", "choice")
ref_effort           <- with(ref_effort,data.frame(choice,season,effort,scenario, area, gear))
ref_effort $randomgroup <- 1
# List with all data that I need from the different scenarios
#------------------------------------
effort_res_allsimul  <- list()
scenario             <- c("Scenario I", "Scenario II", "Scenario III", "Scenario IV", "Model validation")
#==============================================================================
#  Figure 2: Effort, The simulations were made for 200 vessels
#==============================================================================
detach("package:FLCore", unload=TRUE)
for(i in 1:5){ #number of scenarios, 2012 is not included here, need to add it later
effort                     <- as.matrix(effort(sim(res[[i]])))
choice                     <- as.matrix(choice(sim(res[[i]])))
effort_scenario            <- as.data.frame(cbind(effort, choice))
effort_scenario$vessel     <- rep(1:numsimu)
effort_scenario$season     <- c(rep(1,numsimu),rep(2,numsimu),rep(3,numsimu),rep(4,numsimu))
effort_scenario$scenario   <- scenario[i]
effort_scenario$V2         <- as.character(effort_scenario$V2)
effort_scenario$choice     <- as.character(effort_scenario$V2)
effort_scenario$gear       <- substr(effort_scenario$V2, nchar(effort_scenario$V2)-3+1, nchar(effort_scenario$V2))
effort_scenario$area       <- substr(effort_scenario$V2, nchar(effort_scenario$V2)-10+1, nchar(effort_scenario$V2)-3)
effort_scenario            <- effort_scenario[,-2]
names(effort_scenario)[[1]]<- "effort"
effort_scenario            <- with(effort_scenario,data.frame(choice,season,effort,scenario, area, gear))
#Random effect already comes from the Dynstate, therefore I create a new column in which I give numbers from 1 to 100 (1500 simulations,
# divided in 15 vessels (fleet dimension) give us a 100 samples. Then we estimate average of 100 samples)
effort_scenario$randomgroup <- factor(rep(1:(numsimu/15)))
effort_res_allsimul[[i]]   <- effort_scenario
rm (effort_scenario, effort, choice)
}
# EFFORT; all simulations + include the 2012 data (maybe delete it after)
#--------------------------------------------------------------------------
effort_res_allsimul_df          <- rbind (ref_effort, do.call(rbind, effort_res_allsimul))
# Rename area where there is no effort to STAY IN PORT
#--------------------------------------------------------------------------
levels(effort_res_allsimul_df$choice) <- c(levels(effort_res_allsimul_df$choice),"Stay in port")
levels(effort_res_allsimul_df$area)   <- c(levels(effort_res_allsimul_df$area),"Stay in port")
levels(effort_res_allsimul_df$gear)   <- c(levels(effort_res_allsimul_df$gear),"Stay in port")
effort_res_allsimul_df[is.na(effort_res_allsimul_df)] <- c("Stay in port")
effort_res_allsimul_df$choice         <- factor(effort_res_allsimul_df$choice,levels=c("Stay in port",
"VIOTB","VIIOTB","VIIIabdOTB","VIIIabdPTB"))
effort_res_allsimul_df$scenario       <- factor(effort_res_allsimul_df$scenario,levels=c("2012","Scenario I",
"Scenario II", "Scenario III", "Scenario IV", "Model validation"))
effort_res_allsimul_df$effort        <- as.numeric(as.character(effort_res_allsimul_df$effort))
# Sum along each sample and estimate the average from 100 samples
#--------------------------------------------------------------------------
effort_group_sum_allsimul_df <- aggregate(effort ~ choice+season+scenario+area+gear+randomgroup, data=effort_res_allsimul_df, FUN=sum)
# Repetitions try to estimate the mean number of vessels that visit that choice in a given area, gear, season...
effort_group_sum_allsimul_df$repetitions <- aggregate(cbind(count = effort) ~ choice+season+scenario+area+gear+randomgroup, data=effort_res_allsimul_df, function(x){NROW(x)})$count
effort_group_mean_allsimul_df <- aggregate(effort ~ choice+season+scenario+area+gear, data=effort_group_sum_allsimul_df , FUN=mean)
# Repetitions try to estimate the mean number of vessels that visit that choice in a given area, gear, season...
effort_group_mean_allsimul_df$repetitions <- round(aggregate(repetitions ~ choice+season+scenario+area+gear, data=effort_group_sum_allsimul_df, FUN=mean)$repetitions)
# Remove where is no effort from 15 simulations
#------------------------------------------------------------------------
effort_group          <- effort_group_mean_allsimul_df
effort_group          <- subset(effort_group, !(effort %in% c("0")))
effort_group$effort   <- as.numeric(as.character(effort_group$effort))
# Here also with gear type
#--------------------------------------------------------------------------
data1 <- dcast (effort_group, choice+season ~scenario, value.var= "effort", fun.aggregate=sum)
data2 <- dcast (effort_group, choice ~scenario, value.var= "effort", fun.aggregate=sum)
data3 <- as.matrix(tapply(effort_group$effort, effort_group$scenario, FUN=sum))
tot_effort<- as.matrix(tapply(effort_group$effort, effort_group$scenario, FUN=sum))
tot_effort[,1] <- round(tot_effort[,1])
#JUST FOR PLOTTING
#------------------------------------------
# Remove effort from scenarios
modeffort <- subset(effort_group_mean_allsimul_df, (scenario %in% c("2012","Model validation")))
modeffort$scenario       <- factor(modeffort$scenario,levels=c("2012","Model validation",
paste0("2012 \n (n=", tot_effort[1,1],")"),
paste0("Model validation \n (n=", tot_effort[6,1],")")))
modeffort$scenario[modeffort$scenario=="2012"] <- paste0("2012 \n (n=", tot_effort[1,1],")")
modeffort$scenario[modeffort$scenario=="Model validation"] <- paste0("Model validation \n (n=", tot_effort[6,1],")")
modeffort$scenario       <- factor(modeffort$scenario,levels=c(paste0("2012 \n (n=", tot_effort[1,1],")"),
paste0("Model validation \n (n=", tot_effort[6,1],")")))
modeffort <- subset(modeffort,!(choice %in% c("Stay in port")))
# Calculate the percentages
modeffort <- ddply(modeffort, .(season, scenario), transform, percent = effort/sum(effort) * 100)
# Format the labels and calculate their positions
modeffort <- ddply(modeffort, .(season, scenario), transform, pos = (cumsum(effort) - 0.5 * effort))
modeffort$label <- paste0(sprintf("%.0f", modeffort$percent), "%")
# Remove mean effort or 2012 effort and model validation
effortscen<- subset(effort_group_mean_allsimul_df, !(scenario %in% c("2012","Model validation")))
effortscen$scenario       <- factor(effortscen$scenario,levels=c("Scenario I","Scenario II", "Scenario III", "Scenario IV",
paste0("Scenario I \n (n=", tot_effort[2,1],")"),
paste0("Scenario II \n (n=", tot_effort[3,1],")"),
paste0("Scenario III \n (n=", tot_effort[4,1],")"),
paste0("Scenario IV \n (n=", tot_effort[5,1],")")))
effortscen$scenario[effortscen$scenario=="Scenario I"]  <- paste0("Scenario I \n (n=", tot_effort[2,1],")")
effortscen$scenario[effortscen$scenario=="Scenario II"] <- paste0("Scenario II \n (n=", tot_effort[3,1],")")
effortscen$scenario[effortscen$scenario=="Scenario III"]<- paste0("Scenario III \n (n=", tot_effort[4,1],")")
effortscen$scenario[effortscen$scenario=="Scenario IV"] <- paste0("Scenario IV \n (n=", tot_effort[5,1],")")
effortscen$scenario       <- factor(effortscen$scenario,levels=c(paste0("Scenario I \n (n=", tot_effort[2,1],")"),
paste0("Scenario II \n (n=", tot_effort[3,1],")"),
paste0("Scenario III \n (n=", tot_effort[4,1],")"),
paste0("Scenario IV \n (n=", tot_effort[5,1],")")))
effortscen<- subset(effortscen,!(choice %in% c("Stay in port")))
# Calculate the percentages
effortscen <- ddply(effortscen, .(season, scenario), transform, percent = effort/sum(effort) * 100)
# Format the labels and calculate their positions
effortscen <- ddply(effortscen, .(season, scenario), transform, pos = (cumsum(effort) - 0.5 * effort))
effortscen$label <- paste0(sprintf("%.0f", effortscen$percent), "%")
ggplot(effortscen, aes(season,effort, fill=choice)) + #effort_res_15simul_df
geom_bar(stat="identity", colour= "black")+
facet_grid(~scenario)+
geom_text(aes(y = pos, label = label), size = 2) +
scale_fill_manual(values= c("gray80","gray60","gray40","gray20", "gray10"))+
scale_y_continuous(breaks=seq(0,1800,300))+
theme_bw()+
theme(panel.background = element_blank(),legend.title=element_blank(),
legend.position="right",axis.text=element_text(size=8),
strip.text = element_text(size = 8), text = element_text(size=7))+
xlab("season") +
ylab("Fishing effort (days/season)")
2*4*150
